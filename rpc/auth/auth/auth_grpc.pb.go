// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: rpc/auth/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_MemberLogin_FullMethodName          = "/auth.AuthService/MemberLogin"
	AuthService_MemberRegister_FullMethodName       = "/auth.AuthService/MemberRegister"
	AuthService_MemberRefreshToken_FullMethodName   = "/auth.AuthService/MemberRefreshToken"
	AuthService_MemberActivateEmail_FullMethodName  = "/auth.AuthService/MemberActivateEmail"
	AuthService_MemberForgetPassword_FullMethodName = "/auth.AuthService/MemberForgetPassword"
	AuthService_AdminLogin_FullMethodName           = "/auth.AuthService/AdminLogin"
	AuthService_AdminRegister_FullMethodName        = "/auth.AuthService/AdminRegister"
	AuthService_GetJwks_FullMethodName              = "/auth.AuthService/GetJwks"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// C端用户授权
	MemberLogin(ctx context.Context, in *MemberLoginReq, opts ...grpc.CallOption) (*MemberLoginResp, error)
	MemberRegister(ctx context.Context, in *MemberRegisterReq, opts ...grpc.CallOption) (*MemberRegisterResp, error)
	MemberRefreshToken(ctx context.Context, in *MemberRefreshTokenReq, opts ...grpc.CallOption) (*MemberRefreshTokenResp, error)
	MemberActivateEmail(ctx context.Context, in *MemberActivateEmailReq, opts ...grpc.CallOption) (*Empty, error)
	MemberForgetPassword(ctx context.Context, in *MemberForgetPasswordReq, opts ...grpc.CallOption) (*Empty, error)
	// B端用户授权
	AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
	AdminRegister(ctx context.Context, in *AdminRegisterReq, opts ...grpc.CallOption) (*AdminRegisterResp, error)
	// 公钥服务
	GetJwks(ctx context.Context, in *GetJwksReq, opts ...grpc.CallOption) (*GetJwksResp, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) MemberLogin(ctx context.Context, in *MemberLoginReq, opts ...grpc.CallOption) (*MemberLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberLoginResp)
	err := c.cc.Invoke(ctx, AuthService_MemberLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) MemberRegister(ctx context.Context, in *MemberRegisterReq, opts ...grpc.CallOption) (*MemberRegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberRegisterResp)
	err := c.cc.Invoke(ctx, AuthService_MemberRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) MemberRefreshToken(ctx context.Context, in *MemberRefreshTokenReq, opts ...grpc.CallOption) (*MemberRefreshTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberRefreshTokenResp)
	err := c.cc.Invoke(ctx, AuthService_MemberRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) MemberActivateEmail(ctx context.Context, in *MemberActivateEmailReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuthService_MemberActivateEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) MemberForgetPassword(ctx context.Context, in *MemberForgetPasswordReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuthService_MemberForgetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminLoginResp)
	err := c.cc.Invoke(ctx, AuthService_AdminLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AdminRegister(ctx context.Context, in *AdminRegisterReq, opts ...grpc.CallOption) (*AdminRegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminRegisterResp)
	err := c.cc.Invoke(ctx, AuthService_AdminRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetJwks(ctx context.Context, in *GetJwksReq, opts ...grpc.CallOption) (*GetJwksResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJwksResp)
	err := c.cc.Invoke(ctx, AuthService_GetJwks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	// C端用户授权
	MemberLogin(context.Context, *MemberLoginReq) (*MemberLoginResp, error)
	MemberRegister(context.Context, *MemberRegisterReq) (*MemberRegisterResp, error)
	MemberRefreshToken(context.Context, *MemberRefreshTokenReq) (*MemberRefreshTokenResp, error)
	MemberActivateEmail(context.Context, *MemberActivateEmailReq) (*Empty, error)
	MemberForgetPassword(context.Context, *MemberForgetPasswordReq) (*Empty, error)
	// B端用户授权
	AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error)
	AdminRegister(context.Context, *AdminRegisterReq) (*AdminRegisterResp, error)
	// 公钥服务
	GetJwks(context.Context, *GetJwksReq) (*GetJwksResp, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) MemberLogin(context.Context, *MemberLoginReq) (*MemberLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberLogin not implemented")
}
func (UnimplementedAuthServiceServer) MemberRegister(context.Context, *MemberRegisterReq) (*MemberRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberRegister not implemented")
}
func (UnimplementedAuthServiceServer) MemberRefreshToken(context.Context, *MemberRefreshTokenReq) (*MemberRefreshTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberRefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) MemberActivateEmail(context.Context, *MemberActivateEmailReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberActivateEmail not implemented")
}
func (UnimplementedAuthServiceServer) MemberForgetPassword(context.Context, *MemberForgetPasswordReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberForgetPassword not implemented")
}
func (UnimplementedAuthServiceServer) AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAuthServiceServer) AdminRegister(context.Context, *AdminRegisterReq) (*AdminRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRegister not implemented")
}
func (UnimplementedAuthServiceServer) GetJwks(context.Context, *GetJwksReq) (*GetJwksResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJwks not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_MemberLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).MemberLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_MemberLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).MemberLogin(ctx, req.(*MemberLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_MemberRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).MemberRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_MemberRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).MemberRegister(ctx, req.(*MemberRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_MemberRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).MemberRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_MemberRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).MemberRefreshToken(ctx, req.(*MemberRefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_MemberActivateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberActivateEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).MemberActivateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_MemberActivateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).MemberActivateEmail(ctx, req.(*MemberActivateEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_MemberForgetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberForgetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).MemberForgetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_MemberForgetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).MemberForgetPassword(ctx, req.(*MemberForgetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminLogin(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AdminRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AdminRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AdminRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AdminRegister(ctx, req.(*AdminRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetJwks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJwksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetJwks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetJwks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetJwks(ctx, req.(*GetJwksReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberLogin",
			Handler:    _AuthService_MemberLogin_Handler,
		},
		{
			MethodName: "MemberRegister",
			Handler:    _AuthService_MemberRegister_Handler,
		},
		{
			MethodName: "MemberRefreshToken",
			Handler:    _AuthService_MemberRefreshToken_Handler,
		},
		{
			MethodName: "MemberActivateEmail",
			Handler:    _AuthService_MemberActivateEmail_Handler,
		},
		{
			MethodName: "MemberForgetPassword",
			Handler:    _AuthService_MemberForgetPassword_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _AuthService_AdminLogin_Handler,
		},
		{
			MethodName: "AdminRegister",
			Handler:    _AuthService_AdminRegister_Handler,
		},
		{
			MethodName: "GetJwks",
			Handler:    _AuthService_GetJwks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/auth/auth.proto",
}
