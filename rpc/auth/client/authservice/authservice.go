// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2
// Source: auth.proto

package authservice

import (
	"context"

	"github.com/geekeryy/api-hub/rpc/auth/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AdminLoginReq           = auth.AdminLoginReq
	AdminLoginResp          = auth.AdminLoginResp
	AdminRegisterReq        = auth.AdminRegisterReq
	AdminRegisterResp       = auth.AdminRegisterResp
	Empty                   = auth.Empty
	GetJwksReq              = auth.GetJwksReq
	GetJwksResp             = auth.GetJwksResp
	MemberActivateEmailReq  = auth.MemberActivateEmailReq
	MemberForgetPasswordReq = auth.MemberForgetPasswordReq
	MemberLoginReq          = auth.MemberLoginReq
	MemberLoginResp         = auth.MemberLoginResp
	MemberRefreshTokenReq   = auth.MemberRefreshTokenReq
	MemberRefreshTokenResp  = auth.MemberRefreshTokenResp
	MemberRegisterReq       = auth.MemberRegisterReq
	MemberRegisterResp      = auth.MemberRegisterResp

	AuthService interface {
		// C端用户授权
		MemberLogin(ctx context.Context, in *MemberLoginReq, opts ...grpc.CallOption) (*MemberLoginResp, error)
		MemberRegister(ctx context.Context, in *MemberRegisterReq, opts ...grpc.CallOption) (*MemberRegisterResp, error)
		MemberRefreshToken(ctx context.Context, in *MemberRefreshTokenReq, opts ...grpc.CallOption) (*MemberRefreshTokenResp, error)
		MemberActivateEmail(ctx context.Context, in *MemberActivateEmailReq, opts ...grpc.CallOption) (*Empty, error)
		MemberForgetPassword(ctx context.Context, in *MemberForgetPasswordReq, opts ...grpc.CallOption) (*Empty, error)
		// B端用户授权
		AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
		AdminRegister(ctx context.Context, in *AdminRegisterReq, opts ...grpc.CallOption) (*AdminRegisterResp, error)
		// 公钥服务
		GetJwks(ctx context.Context, in *GetJwksReq, opts ...grpc.CallOption) (*GetJwksResp, error)
	}

	defaultAuthService struct {
		cli zrpc.Client
	}
)

func NewAuthService(cli zrpc.Client) AuthService {
	return &defaultAuthService{
		cli: cli,
	}
}

// C端用户授权
func (m *defaultAuthService) MemberLogin(ctx context.Context, in *MemberLoginReq, opts ...grpc.CallOption) (*MemberLoginResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.MemberLogin(ctx, in, opts...)
}

func (m *defaultAuthService) MemberRegister(ctx context.Context, in *MemberRegisterReq, opts ...grpc.CallOption) (*MemberRegisterResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.MemberRegister(ctx, in, opts...)
}

func (m *defaultAuthService) MemberRefreshToken(ctx context.Context, in *MemberRefreshTokenReq, opts ...grpc.CallOption) (*MemberRefreshTokenResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.MemberRefreshToken(ctx, in, opts...)
}

func (m *defaultAuthService) MemberActivateEmail(ctx context.Context, in *MemberActivateEmailReq, opts ...grpc.CallOption) (*Empty, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.MemberActivateEmail(ctx, in, opts...)
}

func (m *defaultAuthService) MemberForgetPassword(ctx context.Context, in *MemberForgetPasswordReq, opts ...grpc.CallOption) (*Empty, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.MemberForgetPassword(ctx, in, opts...)
}

// B端用户授权
func (m *defaultAuthService) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.AdminLogin(ctx, in, opts...)
}

func (m *defaultAuthService) AdminRegister(ctx context.Context, in *AdminRegisterReq, opts ...grpc.CallOption) (*AdminRegisterResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.AdminRegister(ctx, in, opts...)
}

// 公钥服务
func (m *defaultAuthService) GetJwks(ctx context.Context, in *GetJwksReq, opts ...grpc.CallOption) (*GetJwksResp, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.GetJwks(ctx, in, opts...)
}
