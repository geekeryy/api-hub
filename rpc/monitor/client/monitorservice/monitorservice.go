// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2
// Source: monitor.proto

package monitorservice

import (
	"context"

	"github.com/geekeryy/api-hub/rpc/monitor/monitor"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                      = monitor.Empty
	ReportUserLoginMetricsItem = monitor.ReportUserLoginMetricsItem
	ReportUserLoginMetricsReq  = monitor.ReportUserLoginMetricsReq

	MonitorService interface {
		ReportUserLoginMetrics(ctx context.Context, in *ReportUserLoginMetricsReq, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultMonitorService struct {
		cli zrpc.Client
	}
)

func NewMonitorService(cli zrpc.Client) MonitorService {
	return &defaultMonitorService{
		cli: cli,
	}
}

func (m *defaultMonitorService) ReportUserLoginMetrics(ctx context.Context, in *ReportUserLoginMetricsReq, opts ...grpc.CallOption) (*Empty, error) {
	client := monitor.NewMonitorServiceClient(m.cli.Conn())
	return client.ReportUserLoginMetrics(ctx, in, opts...)
}
