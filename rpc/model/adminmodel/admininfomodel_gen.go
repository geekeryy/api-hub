// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package adminmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminInfoFieldNames          = builder.RawFieldNames(&AdminInfo{})
	adminInfoRows                = strings.Join(adminInfoFieldNames, ",")
	adminInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(adminInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	adminInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(adminInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	adminInfoModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *AdminInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AdminInfo, error)
		FindOneByAdminId(ctx context.Context, adminId string) (*AdminInfo, error)
		Update(ctx context.Context, data *AdminInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdminInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AdminInfo struct {
		Id        int64     `db:"id"`
		AdminId   string    `db:"admin_id"`
		Nickname  string    `db:"nickname"`
		Avatar    string    `db:"avatar"`
		Gender    int64     `db:"gender"`
		Birthday  time.Time `db:"birthday"`
		Phone     string    `db:"phone"`
		Email     string    `db:"email"`
		Status    int64     `db:"status"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newAdminInfoModel(conn sqlx.SqlConn) *defaultAdminInfoModel {
	return &defaultAdminInfoModel{
		conn:  conn,
		table: "`admin_info`",
	}
}

func (m *defaultAdminInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminInfoModel) FindOne(ctx context.Context, id int64) (*AdminInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", adminInfoRows, m.table)
	var resp AdminInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminInfoModel) FindOneByAdminId(ctx context.Context, adminId string) (*AdminInfo, error) {
	var resp AdminInfo
	query := fmt.Sprintf("select %s from %s where `admin_id` = ? limit 1", adminInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, adminId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminInfoModel) Insert(ctx context.Context, session sqlx.Session, data *AdminInfo) (sql.Result, error) {
	if session == nil {
		session = m.conn
	}
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminInfoRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.AdminId, data.Nickname, data.Avatar, data.Gender, data.Birthday, data.Phone, data.Email, data.Status)
	return ret, err
}

func (m *defaultAdminInfoModel) Update(ctx context.Context, newData *AdminInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, adminInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.AdminId, newData.Nickname, newData.Avatar, newData.Gender, newData.Birthday, newData.Phone, newData.Email, newData.Status, newData.Id)
	return err
}

func (m *defaultAdminInfoModel) tableName() string {
	return m.table
}
