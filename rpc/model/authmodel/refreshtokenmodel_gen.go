// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package authmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	refreshTokenFieldNames          = builder.RawFieldNames(&RefreshToken{})
	refreshTokenRows                = strings.Join(refreshTokenFieldNames, ",")
	refreshTokenRowsExpectAutoSet   = strings.Join(stringx.Remove(refreshTokenFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	refreshTokenRowsWithPlaceHolder = strings.Join(stringx.Remove(refreshTokenFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	refreshTokenModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *RefreshToken) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RefreshToken, error)
		FindOneByRefreshTokenHash(ctx context.Context, refreshTokenHash string) (*RefreshToken, error)
		Update(ctx context.Context, data *RefreshToken) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRefreshTokenModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RefreshToken struct {
		Id               int64     `db:"id"`
		RefreshTokenHash string    `db:"refresh_token_hash"`
		MemberId         string    `db:"member_id"`
		Status           int64     `db:"status"`
		ExpiredAt        time.Time `db:"expired_at"`
		CreatedAt        time.Time `db:"created_at"`
		UpdatedAt        time.Time `db:"updated_at"`
	}
)

func newRefreshTokenModel(conn sqlx.SqlConn) *defaultRefreshTokenModel {
	return &defaultRefreshTokenModel{
		conn:  conn,
		table: "`refresh_token`",
	}
}

func (m *defaultRefreshTokenModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRefreshTokenModel) FindOne(ctx context.Context, id int64) (*RefreshToken, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", refreshTokenRows, m.table)
	var resp RefreshToken
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefreshTokenModel) FindOneByRefreshTokenHash(ctx context.Context, refreshTokenHash string) (*RefreshToken, error) {
	var resp RefreshToken
	query := fmt.Sprintf("select %s from %s where `refresh_token_hash` = ? limit 1", refreshTokenRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, refreshTokenHash)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRefreshTokenModel) Insert(ctx context.Context, session sqlx.Session, data *RefreshToken) (sql.Result, error) {
	if session == nil {
		session = m.conn
	}
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, refreshTokenRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.RefreshTokenHash, data.MemberId, data.Status, data.ExpiredAt)
	return ret, err
}

func (m *defaultRefreshTokenModel) Update(ctx context.Context, newData *RefreshToken) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, refreshTokenRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.RefreshTokenHash, newData.MemberId, newData.Status, newData.ExpiredAt, newData.Id)
	return err
}

func (m *defaultRefreshTokenModel) tableName() string {
	return m.table
}
