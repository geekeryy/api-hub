// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package authmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	permissionsFieldNames          = builder.RawFieldNames(&Permissions{})
	permissionsRows                = strings.Join(permissionsFieldNames, ",")
	permissionsRowsExpectAutoSet   = strings.Join(stringx.Remove(permissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	permissionsRowsWithPlaceHolder = strings.Join(stringx.Remove(permissionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	permissionsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Permissions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Permissions, error)
		Update(ctx context.Context, data *Permissions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPermissionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Permissions struct {
		Id          int64     `db:"id"`
		Name        string    `db:"name"`
		Type        int64     `db:"type"`
		Params      string    `db:"params"`
		Apis        string    `db:"apis"`
		Pid         int64     `db:"pid"`
		Description string    `db:"description"`
		CreatedAt   time.Time `db:"created_at"`
		UpdatedAt   time.Time `db:"updated_at"`
	}
)

func newPermissionsModel(conn sqlx.SqlConn) *defaultPermissionsModel {
	return &defaultPermissionsModel{
		conn:  conn,
		table: "`permissions`",
	}
}

func (m *defaultPermissionsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPermissionsModel) FindOne(ctx context.Context, id int64) (*Permissions, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", permissionsRows, m.table)
	var resp Permissions
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionsModel) Insert(ctx context.Context, session sqlx.Session, data *Permissions) (sql.Result, error) {
	if session == nil {
		session = m.conn
	}
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, permissionsRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.Name, data.Type, data.Params, data.Apis, data.Pid, data.Description)
	return ret, err
}

func (m *defaultPermissionsModel) Update(ctx context.Context, data *Permissions) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, permissionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.Params, data.Apis, data.Pid, data.Description, data.Id)
	return err
}

func (m *defaultPermissionsModel) tableName() string {
	return m.table
}
