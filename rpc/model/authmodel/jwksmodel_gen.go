// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package authmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	jwksFieldNames          = builder.RawFieldNames(&Jwks{})
	jwksRows                = strings.Join(jwksFieldNames, ",")
	jwksRowsExpectAutoSet   = strings.Join(stringx.Remove(jwksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	jwksRowsWithPlaceHolder = strings.Join(stringx.Remove(jwksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	jwksModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Jwks) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Jwks, error)
		Update(ctx context.Context, data *Jwks) error
		Delete(ctx context.Context, id int64) error
	}

	defaultJwksModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Jwks struct {
		Id         int64     `db:"id"`
		Service    string    `db:"service"`
		Kid        string    `db:"kid"`
		PublicKey  string    `db:"public_key"`
		PrivateKey string    `db:"private_key"`
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
	}
)

func newJwksModel(conn sqlx.SqlConn) *defaultJwksModel {
	return &defaultJwksModel{
		conn:  conn,
		table: "`jwks`",
	}
}

func (m *defaultJwksModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultJwksModel) FindOne(ctx context.Context, id int64) (*Jwks, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", jwksRows, m.table)
	var resp Jwks
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultJwksModel) Insert(ctx context.Context, session sqlx.Session, data *Jwks) (sql.Result, error) {
	if session == nil {
		session = m.conn
	}
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, jwksRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.Service, data.Kid, data.PublicKey, data.PrivateKey)
	return ret, err
}

func (m *defaultJwksModel) Update(ctx context.Context, data *Jwks) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, jwksRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Service, data.Kid, data.PublicKey, data.PrivateKey, data.Id)
	return err
}

func (m *defaultJwksModel) tableName() string {
	return m.table
}
