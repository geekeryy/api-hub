// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package authmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tokenRefreshRecordFieldNames          = builder.RawFieldNames(&TokenRefreshRecord{})
	tokenRefreshRecordRows                = strings.Join(tokenRefreshRecordFieldNames, ",")
	tokenRefreshRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(tokenRefreshRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tokenRefreshRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(tokenRefreshRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tokenRefreshRecordModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *TokenRefreshRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TokenRefreshRecord, error)
		FindOneByToken(ctx context.Context, token string) (*TokenRefreshRecord, error)
		Update(ctx context.Context, data *TokenRefreshRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTokenRefreshRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TokenRefreshRecord struct {
		Id               int64     `db:"id"`
		RefreshTokenHash string    `db:"refresh_token_hash"`
		Token            string    `db:"token"`
		Kid              string    `db:"kid"`
		Ip               string    `db:"ip"`
		UserAgent        string    `db:"user_agent"`
		ExpiredAt        time.Time `db:"expired_at"`
		CreatedAt        time.Time `db:"created_at"`
		UpdatedAt        time.Time `db:"updated_at"`
	}
)

func newTokenRefreshRecordModel(conn sqlx.SqlConn) *defaultTokenRefreshRecordModel {
	return &defaultTokenRefreshRecordModel{
		conn:  conn,
		table: "`token_refresh_record`",
	}
}

func (m *defaultTokenRefreshRecordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTokenRefreshRecordModel) FindOne(ctx context.Context, id int64) (*TokenRefreshRecord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tokenRefreshRecordRows, m.table)
	var resp TokenRefreshRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTokenRefreshRecordModel) FindOneByToken(ctx context.Context, token string) (*TokenRefreshRecord, error) {
	var resp TokenRefreshRecord
	query := fmt.Sprintf("select %s from %s where `token` = ? limit 1", tokenRefreshRecordRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, token)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTokenRefreshRecordModel) Insert(ctx context.Context, session sqlx.Session, data *TokenRefreshRecord) (sql.Result, error) {
	if session == nil {
		session = m.conn
	}
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, tokenRefreshRecordRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.RefreshTokenHash, data.Token, data.Kid, data.Ip, data.UserAgent, data.ExpiredAt)
	return ret, err
}

func (m *defaultTokenRefreshRecordModel) Update(ctx context.Context, newData *TokenRefreshRecord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tokenRefreshRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.RefreshTokenHash, newData.Token, newData.Kid, newData.Ip, newData.UserAgent, newData.ExpiredAt, newData.Id)
	return err
}

func (m *defaultTokenRefreshRecordModel) tableName() string {
	return m.table
}
