// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package membermodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	memberInfoFieldNames          = builder.RawFieldNames(&MemberInfo{})
	memberInfoRows                = strings.Join(memberInfoFieldNames, ",")
	memberInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(memberInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	memberInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(memberInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	memberInfoModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *MemberInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MemberInfo, error)
		FindOneByMemberUuid(ctx context.Context, memberUuid string) (*MemberInfo, error)
		Update(ctx context.Context, data *MemberInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMemberInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MemberInfo struct {
		Id         int64     `db:"id"`
		MemberUuid string    `db:"member_uuid"`
		Nickname   string    `db:"nickname"`
		Avatar     string    `db:"avatar"`
		Gender     int64     `db:"gender"`
		Birthday   time.Time `db:"birthday"`
		Phone      string    `db:"phone"`
		Email      string    `db:"email"`
		Status     int64     `db:"status"`
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
	}
)

func newMemberInfoModel(conn sqlx.SqlConn) *defaultMemberInfoModel {
	return &defaultMemberInfoModel{
		conn:  conn,
		table: "`member_info`",
	}
}

func (m *defaultMemberInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMemberInfoModel) FindOne(ctx context.Context, id int64) (*MemberInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", memberInfoRows, m.table)
	var resp MemberInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMemberInfoModel) FindOneByMemberUuid(ctx context.Context, memberUuid string) (*MemberInfo, error) {
	var resp MemberInfo
	query := fmt.Sprintf("select %s from %s where `member_uuid` = ? limit 1", memberInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, memberUuid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMemberInfoModel) Insert(ctx context.Context, session sqlx.Session, data *MemberInfo) (sql.Result, error) {
	if session == nil {
		session = m.conn
	}
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, memberInfoRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.MemberUuid, data.Nickname, data.Avatar, data.Gender, data.Birthday, data.Phone, data.Email, data.Status)
	return ret, err
}

func (m *defaultMemberInfoModel) Update(ctx context.Context, newData *MemberInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, memberInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.MemberUuid, newData.Nickname, newData.Avatar, newData.Gender, newData.Birthday, newData.Phone, newData.Email, newData.Status, newData.Id)
	return err
}

func (m *defaultMemberInfoModel) tableName() string {
	return m.table
}
