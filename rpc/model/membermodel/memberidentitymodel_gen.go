// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package membermodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	memberIdentityFieldNames          = builder.RawFieldNames(&MemberIdentity{})
	memberIdentityRows                = strings.Join(memberIdentityFieldNames, ",")
	memberIdentityRowsExpectAutoSet   = strings.Join(stringx.Remove(memberIdentityFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	memberIdentityRowsWithPlaceHolder = strings.Join(stringx.Remove(memberIdentityFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	memberIdentityModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *MemberIdentity) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MemberIdentity, error)
		Update(ctx context.Context, data *MemberIdentity) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMemberIdentityModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MemberIdentity struct {
		Id           int64     `db:"id"`
		MemberUuid   string    `db:"member_uuid"`
		IdentityType int64     `db:"identity_type"`
		Identifier   string    `db:"identifier"`
		Credential   string    `db:"credential"`
		Status       int64     `db:"status"`
		CreatedAt    time.Time `db:"created_at"`
		UpdatedAt    time.Time `db:"updated_at"`
	}
)

func newMemberIdentityModel(conn sqlx.SqlConn) *defaultMemberIdentityModel {
	return &defaultMemberIdentityModel{
		conn:  conn,
		table: "`member_identity`",
	}
}

func (m *defaultMemberIdentityModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMemberIdentityModel) FindOne(ctx context.Context, id int64) (*MemberIdentity, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", memberIdentityRows, m.table)
	var resp MemberIdentity
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMemberIdentityModel) Insert(ctx context.Context, session sqlx.Session, data *MemberIdentity) (sql.Result, error) {
	if session == nil {
		session = m.conn
	}
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, memberIdentityRowsExpectAutoSet)
	ret, err := session.ExecCtx(ctx, query, data.MemberUuid, data.IdentityType, data.Identifier, data.Credential, data.Status)
	return ret, err
}

func (m *defaultMemberIdentityModel) Update(ctx context.Context, data *MemberIdentity) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, memberIdentityRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.MemberUuid, data.IdentityType, data.Identifier, data.Credential, data.Status, data.Id)
	return err
}

func (m *defaultMemberIdentityModel) tableName() string {
	return m.table
}
