// Code generated by goctl. DO NOT EDIT!

package usermodel

import (
	"context"
	"database/sql"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc/pagex"
	"gorm.io/gorm"
)

type (
	memberInfoModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *MemberInfo) error
		BatchInsert(ctx context.Context, tx *gorm.DB, news []MemberInfo) error
		FindOne(ctx context.Context, id int64) (*MemberInfo, error)
		FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
			orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]MemberInfo, int64, error)
		FindOneByMemberId(ctx context.Context, memberId string) (*MemberInfo, error)
		Update(ctx context.Context, tx *gorm.DB, data *MemberInfo) error
		BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []MemberInfo) error
		BatchDelete(ctx context.Context, tx *gorm.DB, datas []MemberInfo) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
	}

	defaultMemberInfoModel struct {
		conn  *gorm.DB
		table string
	}

	MemberInfo struct {
		Id        int64          `gorm:"column:id;primary_key"`
		MemberId  string         `gorm:"column:member_id"`
		Nickname  string         `gorm:"column:nickname"`
		Avatar    string         `gorm:"column:avatar"`
		Gender    int64          `gorm:"column:gender"`
		Birthday  time.Time      `gorm:"column:birthday"`
		Phone     string         `gorm:"column:phone"`
		Email     string         `gorm:"column:email"`
		Status    int64          `gorm:"column:status"`
		CreatedAt sql.NullTime   `gorm:"column:created_at"`
		UpdatedAt sql.NullTime   `gorm:"column:updated_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (MemberInfo) TableName() string {
	return `"public"."member_info"`
}

func newMemberInfoModel(db *gorm.DB) *defaultMemberInfoModel {
	return &defaultMemberInfoModel{
		conn:  db,
		table: `"public"."member_info"`,
	}
}

func (m *defaultMemberInfoModel) Insert(ctx context.Context, tx *gorm.DB, data *MemberInfo) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Create(&data).Error
	return err
}
func (m *defaultMemberInfoModel) BatchInsert(ctx context.Context, tx *gorm.DB, news []MemberInfo) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Create(&news).Error
	return err
}

func (m *defaultMemberInfoModel) FindOne(ctx context.Context, id int64) (*MemberInfo, error) {
	var resp MemberInfo
	err := m.conn.WithContext(ctx).Model(&MemberInfo{}).Where("id = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultMemberInfoModel) FindPageList(ctx context.Context, page *pagex.ListReq, orderBy pagex.OrderBy,
	orderKeys map[string]string, whereClause func(db *gorm.DB) *gorm.DB) ([]MemberInfo, int64, error) {
	conn := m.conn
	formatDB := func() (*gorm.DB, *gorm.DB) {
		db := conn.Model(&MemberInfo{})
		if whereClause != nil {
			db = whereClause(db)
		}
		return db, nil
	}

	res, total, err := pagex.FindPageListWithCount[MemberInfo](ctx, page, orderBy, orderKeys, formatDB)
	return res, total, err
}

func (m *defaultMemberInfoModel) FindOneByMemberId(ctx context.Context, memberId string) (*MemberInfo, error) {
	var resp MemberInfo
	err := m.conn.WithContext(ctx).Model(&MemberInfo{}).Where("member_id = $1", memberId).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMemberInfoModel) Update(ctx context.Context, tx *gorm.DB, data *MemberInfo) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}
func (m *defaultMemberInfoModel) BatchUpdate(ctx context.Context, tx *gorm.DB, olds, news []MemberInfo) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&news).Error

	return err
}

func (m *defaultMemberInfoModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&MemberInfo{}, id).Error

	return err
}

func (m *defaultMemberInfoModel) BatchDelete(ctx context.Context, tx *gorm.DB, datas []MemberInfo) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.Delete(&datas).Error
	return err
}
