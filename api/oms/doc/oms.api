info (
	title:        "oms"
	description:  "运维管理服务"
	contactName:  "jiangyang"
	contactEmail: "jiangyang.me@gmail.com"
	licenseName:  "MIT"
	licenseUrl:   "https://github.com/geekeryy/api-hub/blob/main/LICENSE"
	host:         "localhost:8881"
	basePath:     ""
)

@server (
	prefix: /api/v1/oms
	group:  healthz
	tags:   "健康检查"
)
service oms-api {
	@doc (
		summary: "健康检查"
	)
	@handler PingHandler
	get /ping
}

@server (
	group:      auth
	middleware: ContextMiddleware
	prefix:     /api/v1/oms/auth
	tags:       "Oms - auth"
)
service oms-api {
	@doc (
		summary: "登录"
	)
	@handler LoginHandler
	post /login (LoginReq) returns (LoginResp)
}

@server (
	group:      auth
	middleware: ContextMiddleware,OmsJwtMiddleware
	prefix:     /api/v1/oms/auth
	tags:       "Oms - auth"
)
service oms-api {
	@doc (
		summary: "登出"
	)
	@handler LogoutHandler
	post /logout

	@doc (
		summary: "获取用户信息"
	)
	@handler MemberInfoHandler
	get /info returns (MemberInfoResp)
}



@server (
	group:      jwks
	middleware: ContextMiddleware,OmsJwtMiddleware
	prefix:     /api/v1/oms/jwks
	tags:       "Oms - jwks"
)
service oms-api {
	@doc (
		summary:     "公钥使用记录"
		description: "公钥使用记录"
	)
	@handler KeyUsageHandler
	get /usage (KeyUsageReq) returns (KeyUsageResp)

	@doc (
		summary:     "删除公钥"
		description: "删除公钥"
	)
	@handler DeleteKeyHandler
	delete /delete (DeleteKeyReq)

	@doc (
		summary:     "轮换公钥"
		description: "轮换公钥"
	)
	@handler RotateKeyHandler
	put /rotate
}

@server (
	group:      rbac
	middleware: ContextMiddleware,OmsJwtMiddleware
	prefix:     /api/v1/oms/rbac
	tags:       "Oms - rbac"
)
service oms-api {}

type (
	LoginReq {
		IdentityType int64  `json:"identity_type,options=8"` // 身份类型 8: otp
		Credential   string `json:"credential"` // 凭证 密码/验证码/access_token
	}
	LoginResp {
		Token string `json:"token"` // 令牌
	}
	MemberInfoResp {
		Nickname string `json:"nickname"` // 昵称
		Avatar   string `json:"avatar"` // 头像
		Phone    string `json:"phone"` // 手机号
		Email    string `json:"email"` // 邮箱
	}
	KeyUsageReq {
		Kid string `json:"kid"`
	}
	KeyUsageResp {
		Records []TokenRefreshRecord `json:"records"`
	}
	TokenRefreshRecord {
		Time  string `json:"time"`
		Count int    `json:"count"`
	}
	DeleteKeyReq {
		Kid string `json:"kid"`
	}
)

